/**
 * Send data of new user to DB
 * @param {string} fullName - Name displayed in Telegram
 * @param {number} telegramId - Telegram user ID
 * @param {string} csrf - Autogenerated string for verification
 * @returns {Promise<Object>} - Parsed JSON response from the server
 * @throws {Error} - If the request fails or the response is not valid JSON
 */
const sendData = (fullName, telegramId, csrf) => {

    if (!fullName || !telegramId || !csrf) {
        throw new Error("Missing required parameters");
    }
    return fetch('/api/v1/register_user', {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "X-CSRFToken": csrf
        },
        body: JSON.stringify({
            'telegram_fullname': fullName,
            'telegram_id': telegramId
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
    });
};

document.addEventListener("DOMContentLoaded", () => {
    const csrf = document.getElementById('csrf')?.dataset.csrf;

    if (!csrf) {
		console.error("CSRF token is missing");
		return;
	}
    const version = document.getElementById('version')?.dataset.version;

    Telegram.WebApp.ready();
    const tgWindow = window.Telegram?.WebApp;
    const userData = tgWindow.initDataUnsafe?.user;

    let fullName;
    let telegramId;

    if (userData === null || userData === undefined) {
        fullName = 'Foma Turnak';
        telegramId = 530;
    }
    else {
        fullName = userData.first_name + ' ' + userData.last_name ;
        telegramId = userData.id;
    }


    document.getElementById("userdata_unsafe").textContent = fullName;

    sendData(fullName, telegramId, csrf).then(() => {
            window.location.href = `main/?v=${version}`;
        })
        .catch((error) => {
            console.error("Failed to send data:", error);
        });
});

